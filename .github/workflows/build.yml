name: Build Bitmap2SVG Python Package

on:
  push:
    branches:
      - bitmap2svg 
    tags:
      - 'v0.2.0'
  pull_request:
    branches:
      - bitmap2svg 
  workflow_dispatch: # Allow manual run

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} / Py ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13] # macos-13 for Intel, macos-14 for Apple Silicon builds
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        # For macOS, might want specific arch builds or use cibuildwheel for universal2
        # include:
        #   - os: macos-14 # Apple Silicon runner
        #     arch: arm64
        #   - os: macos-13 # Intel runner
        #     arch: x86_64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Potrace (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libpotrace-dev potrace
          # Verify (optional)
          dpkg -L libpotrace-dev

      - name: Install Potrace (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install potrace
          # Set environment variables to help find Potrace if needed by setup.py
          echo "POTRACE_INCLUDE_DIR=$(brew --prefix potrace)/include" >> $GITHUB_ENV
          echo "POTRACE_LIB_DIR=$(brew --prefix potrace)/lib" >> $GITHUB_ENV
          # Also common paths for compilers
          echo "CPATH=$(brew --prefix potrace)/include:$CPATH" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$(brew --prefix potrace)/lib:$LIBRARY_PATH" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix potrace)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix potrace)/include" >> $GITHUB_ENV


      - name: Install Potrace (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Using vcpkg for Potrace (recommended for Windows C++ dependencies)
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg-cache\vcpkg --depth 1
          Push-Location C:\vcpkg-cache\vcpkg
          .\bootstrap-vcpkg.bat
          # For 64-bit builds. Adjust to x86-windows for 32-bit if necessary.
          .\vcpkg install potrace:x64-windows-static # static linking might be easier
          # Or .\vcpkg install potrace:x64-windows for dynamic
          Pop-Location
          $env:POTRACE_INCLUDE_DIR = "C:\vcpkg-cache\vcpkg\installed\x64-windows-static\include"
          $env:POTRACE_LIB_DIR = "C:\vcpkg-cache\vcpkg\installed\x64-windows-static\lib"
          # Add DLL path if dynamically linked
          # $env:Path = "C:\vcpkg-cache\vcpkg\installed\x64-windows\bin;" + $env:Path
          echo "POTRACE_INCLUDE_DIR=C:\vcpkg-cache\vcpkg\installed\x64-windows-static\include" >> $env:GITHUB_ENV
          echo "POTRACE_LIB_DIR=C:\vcpkg-cache\vcpkg\installed\x64-windows-static\lib" >> $env:GITHUB_ENV

          # Fallback: choco (often only installs .exe, not dev libs)
          # choco install potrace --yes --force || echo "Choco potrace install failed or not suitable for dev."

      - name: Install Python build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel setuptools pybind11>=2.6.0 numpy

      - name: Build wheel
        # The environment variables POTRACE_INCLUDE_DIR and POTRACE_LIB_DIR set above will be used by setup.py
        run: |
          pip wheel . -w dist --no-deps
        env:
          # Forcing flags if needed, but env vars should be preferred for paths
          # CFLAGS: ${{ env.CPPFLAGS }} # Use CPPFLAGS set in macOS step
          # LDFLAGS: ${{ env.LDFLAGS }} # Use LDFLAGS set in macOS step
          SETUPTOOLS_ symptÃ´mes_MODE: "strict" # Catches more build issues

      - name: Store wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: ./dist/*.whl

  build_sdist:
    name: Build source distribution (sdist)
    runs-on: ubuntu-latest # sdist is platform-agnostic
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # A recent Python for sdist build

      - name: Install Python build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel pybind11>=2.6.0

      - name: Build sdist
        run: python setup.py sdist -d dist

      - name: Store sdist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: ./dist/*.tar.gz
